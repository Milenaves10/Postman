{
	"info": {
		"_postman_id": "a12c14c0-b27a-40dc-ae5c-270fa09a3989",
		"name": "HW_2_POSTMAN",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Age is 20\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.age).to.eql(\"20\");\r",
							"});\r",
							"\r",
							"pm.test (\"Name is Milena\") , function () {  \r",
							"    var jsonData = pm.response.json ();\r",
							"    pm.expect(jsonData.name).to.eql (Milena);\r",
							"};\r",
							"\r",
							"pm.test (\"Salary is 1000\") , function () {  \r",
							"    var jsonData = pm.response.json ();\r",
							"    pm.expect(jsonData.salary).to.eql (\"1000\");\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Milena",
							"type": "text"
						},
						{
							"key": "age",
							"value": "20",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test (\"Name is Milena\" , function () {  \r",
							"    var jsonData = pm.response.json ();\r",
							"    pm.expect(jsonData.name).to.eql (\"Milena\");\r",
							"});\r",
							"\r",
							"pm.test (\"Age is 20\" , function () {  \r",
							"    var jsonData = pm.response.json ();\r",
							"    pm.expect(jsonData.age).to.eql (\"20\");\r",
							"});\r",
							"\r",
							"pm.test (\"Salary is Milena\" , function () {  \r",
							"    var jsonData = pm.response.json ();\r",
							"    pm.expect(jsonData.salary).to.eql (1000);\r",
							"});\r",
							"\r",
							"console.log(jsonData.family)\r",
							"\r",
							"pm.test (\"dog object contains 'name'\" , function () {\r",
							"    var jsonData = pm.response.json ();\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property (\"name\");\r",
							"});\r",
							"\r",
							"pm.test (\"dog object contains 'age'\" , function () {\r",
							"    var jsonData = pm.response.json ();\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property (\"age\");\r",
							"});\r",
							"\r",
							"pm.test (\"Name is Luky\",function () {\r",
							"    var jsonData = pm.response.json ();\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql (\"Luky\");\r",
							"});\r",
							"\r",
							"pm.test (\"Age is 4\" , function () {  \r",
							"    var jsonData = pm.response.json ();\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql (4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Milena&age=20&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Milena"
						},
						{
							"key": "age",
							"value": "20"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let req = pm.request.url.query.toObject();\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    var jsonData = pm.response.json ();\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test (\"Name is Milena\" , function () {  \r",
							"    var jsonData = pm.response.json ();\r",
							"    pm.expect(jsonData.name).to.eql (\"Milena\");\r",
							"});\r",
							"pm.test (\"Age is 20\" , function () {    \r",
							"    var jsonData = pm.response.json ();\r",
							"    pm.expect (jsonData.age).to.eql (20);\r",
							"});\r",
							"\r",
							"console.log(req.salary)\r",
							"console.log(jsonData.salary)\r",
							"console.log(jsonData.salary[0])\r",
							"console.log(jsonData.salary[1])\r",
							"console.log(jsonData.salary[2])\r",
							"\r",
							"let jsonData_salary_1000 = + jsonData.salary[0];\r",
							"let jsonData_salary_2000 = + jsonData.salary[1];\r",
							"let jsonData_salary_3000 = + jsonData.salary[2];\r",
							"pm.test(\"Sal_1000\", function () {\r",
							"     pm.expect(jsonData.salary[0]).to.eql(Number(req.salary));\r",
							"});\r",
							"\r",
							"pm.test(\"Sal_2000\", function () {\r",
							"     pm.expect(jsonData.salary[1]).to.eql(String(req.salary*2));\r",
							"});\r",
							"\r",
							"pm.test(\"Sal_3000\", function () {\r",
							"     pm.expect(jsonData.salary[2]).to.eql(String(req.salary*3));\r",
							"});\r",
							"\r",
							"pm.environment.set(\"name\",req.name);\r",
							"\r",
							"pm.environment.set(\"age\",req.age);\r",
							"\r",
							"pm.environment.set(\"salary\", req.salary);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Milena&age=20&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Milena"
						},
						{
							"key": "age",
							"value": "20"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"// 5.Статстус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//6.Спарсить response body в json.\r",
							"var response = JSON.parse (responseBody);\r",
							"//7. Спарсить request.\r",
							"var request = request.data;\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Response have param = start_qa_salary\", function (){   \r",
							"    pm.expect(response).to.have.property(\"start_qa_salary\")\r",
							"});\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Response have param = qa_salary_after_6_months\", function (){   \r",
							"    pm.expect(response).to.have.property(\"qa_salary_after_6_months\")\r",
							"});\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Response have param = qa_salary_after_12_months\", function (){   \r",
							"    pm.expect(response).to.have.property(\"qa_salary_after_12_months\")\r",
							"});\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Response have param = qa_salary_after_1.5_year\", function (){   \r",
							"    pm.expect(response).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"});\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Response have param = qa_salary_after_3.5_years\", function (){   \r",
							"    pm.expect(response).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"});\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Response have param = person\", function (){   \r",
							"    pm.expect(response).to.have.property(\"person\")\r",
							"});\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Correct start_qa_salary \", function (){   \r",
							"    pm.expect(response.start_qa_salary).to.eql(+request.salary)\r",
							"});\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Correct qa_salary_after_6_months \", function (){   \r",
							"    pm.expect(response.qa_salary_after_6_months).to.eql(request.salary*2)\r",
							"});\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Correct qa_salary_after_12_months \", function (){   \r",
							"    pm.expect(response.qa_salary_after_12_months).to.eql(request.salary*2.7)\r",
							"});\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Correct qa_salary_after_1.5_year \", function (){   \r",
							"    pm.expect(response[\"qa_salary_after_1.5_year\"]).to.eql(request.salary*3.3)\r",
							"});\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Correct qa_salary_after_3.5_years \", function (){   \r",
							"    pm.expect(response[\"qa_salary_after_3.5_years\"]).to.eql(request.salary*3.8)\r",
							"});\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Correct param u_name \", function (){   \r",
							"    pm.expect(response.person.u_name[1]).to.eql(+request.salary)\r",
							"});\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Correct param u_age \", function (){   \r",
							"    pm.expect(response.person.u_age).to.eql(+request.age)\r",
							"});\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Correct param u_salary_5_years \", function (){   \r",
							"    pm.expect(response.person.u_salary_5_years).to.eql(request.salary*4.2)\r",
							"});\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (i in jsonData.person) {    \r",
							"    console.log (\"Ключ = \" +i,typeof(i));\r",
							"    if (typeof (jsonData.person[i])== 'object'){    \r",
							"    for (j in jsonData.person[i]){ \r",
							"console.log (\"Значение = \" + jsonData.person [i] [j],typeof (jsonData.person [i] [j]))\r",
							"    }\r",
							"\r",
							"    }else{  \r",
							"        console.log (\"Значение = \" + jsonData.person [i], typeof (jsonData.person [i]));}\r",
							"    }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Milena",
							"type": "text"
						},
						{
							"key": "age",
							"value": "20",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}